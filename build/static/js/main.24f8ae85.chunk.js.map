{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","robot","key","SearchBox","handleChange","placeholder","type","onChange","Scroll","props","style","overflow","border","height","margin","padding","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","Header","PureComponent","App","onRequestRobots","searchField","onSearchChange","pending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","disptach","fetch","then","response","json","data","catch","initialSearchState","initialRobotState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24f8ae85.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\nreturn(\n<div className='tc bg-light-purple dib br3 pa3 ma2 grow bw2 shadow-5'>\n    <img alt='robots'src={`https://robohash.org/${id}?200x200`} />    \n    <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n    </div>\n</div>\n);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n\n    return (\n        robots.map(robot => {\n            return (\n                <Card name={robot.name} email={robot.email} key={robot.id} id={robot.id} />\n\n\n            )\n        }\n\n    ))\n}\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({handleChange})=>{\n    return (\n        <div>\n            <input className='bg-light-blue ba b--red ma2 pa2 ' placeholder='Search Friends' type='search' onChange={handleChange}/>\n\n        </div>\n\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll=(props)=>{\n\n    return(\n        <div style={{overflow:'scroll', border: '2px solid red', height:'600px', margin:'10px', padding:'10px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops . There was an error</h1>\n        }\n        return this.props.children\n    }\n\n}\n\nexport default ErrorBoundary;","import React, {PureComponent} from 'react';\n\nclass Header extends PureComponent{\n    render(){\n        return <h1 className='f1'>Robo Friends</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css'\n\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        pending: state.requestRobots.pending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\nclass App extends React.Component {\n   \n    componentDidMount() {\n        this.props.onRequestRobots();\n      }\n\n    render() {\n\n        const { searchField, onSearchChange, robots, pending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return (robot.name.toLowerCase().includes(searchField.toLowerCase()))\n        })\n        return pending ?\n            <h1 className='tc'>Loading...</h1> :\n            (\n                <div className='tc'>\n                    <Header/>\n                    <SearchBox handleChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n\n\n    }\n}\n\n\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'\n\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (disptach) => {\n    disptach({\n        type: REQUEST_ROBOTS_PENDING\n\n    });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => disptach({\n            type: REQUEST_ROBOTS_SUCCESS,\n            payload: data\n        }))\n        .catch(error => disptach({\n            type: REQUEST_ROBOTS_FAILED,\n            payload: error\n\n        }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED'","import {\n    CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\n\nconst initialSearchState = {\n    searchField: ''\n}\n\n\nexport const searchRobots = (state = initialSearchState, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD: return { ...state, searchField: action.payload }\n        default: return state;\n    }\n}\n\nconst initialRobotState = {\n    robots: [],\n    pending: false,\n    error: ''\n}\n\n\nexport const requestRobots = (state = initialRobotState, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                pending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                robots: action.payload,\n                pending: false\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                pending: false\n            }\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App'\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}